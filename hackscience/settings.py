"""
Django settings for hackscience project.

Generated by 'django-admin startproject' using Django 1.9.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import yaml
import re
import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# pass a variable from python manage.py to here
env = os.environ.get('APP_ENV', '')

CONFIG_DIR = BASE_DIR + "/config/"

pattern = re.compile(r'^\<%= ENV\[\'(.*)\'\] %\>(.*)$')
yaml.add_implicit_resolver("!pathex", pattern)


def pathex_constructor(loader,node):
    value = loader.construct_scalar(node)
    env_var, remaining_path = pattern.match(value).groups()
    return os.environ[env_var] + remaining_path


yaml.add_constructor('!pathex', pathex_constructor)

# Load Default Config File
with open(CONFIG_DIR + "config.yml", 'r') as ymlfile:
    default_cfg = yaml.load(ymlfile)

# Attempt a custom Config File
try:
    with open(CONFIG_DIR + "config-"+env+".yml", 'r') as ymlfile:
        custom_cfg = yaml.load(ymlfile)
except IOError:
    custom_cfg = {}

default_cfg.update(custom_cfg)

print(default_cfg)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = default_cfg['secret_key']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = default_cfg['debug']

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]', 'hacking-science-website.herokuapp.com', 'hackingscience.io', 'hackingeducation.io', '*.herokuapp.com', 'www.hackingscience.io', 'www.hackingeducation.io']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'breathe',
    'django_extensions',
    'django_nose'
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

ROOT_URLCONF = 'hackscience.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TEMPLATE_DIRS = (
    "",
)

WSGI_APPLICATION = 'hackscience.wsgi.application'

# we are using heroku you need to use this... I hate it but meh
# https://devcenter.heroku.com/articles/heroku-postgresql#connecting-with-django
if default_cfg['heroku']:
    default_cfg['db'] = dj_database_url.config()

# Load up the right setting for sqlite3 db
if default_cfg['db']['ENGINE'] == 'django.db.backends.sqlite3':
    default_cfg['db']['NAME'] = os.path.join(BASE_DIR, default_cfg['db']['NAME'])

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
# if this is sqlite3 then use somthing else
DATABASES = {
    'default': default_cfg['db']
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collect static to find static files.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'blog', 'static'),
    os.path.join(BASE_DIR, 'breathe', 'static'),
)

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/

STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'
